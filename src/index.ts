// @ts-nocheck
import { app, BrowserWindow, desktopCapturer, ipcMain, dialog } from "electron";
// let path = require('path')
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
const https = require("https");
const cheerio = require("cheerio");
const path = require('path')
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const host = "https://www.soujianzhu.cn/NormAndRules/";

let menuList = [];
let currentIndex = 0;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.on("screenshot:capture", (e, value) => {
    desktopCapturer
      .getSources({
        types: ["window"],
        thumbnailSize: { width: 1920, height: 1080 },
      })
      .then((sources) => {
        let imgArr: any = [];
        sources.map((item) => {
          if (item.thumbnail) {
            imgArr.push(item.thumbnail.toDataURL());
          }
        });
        // let image = sources[0].thumbnail.toDataURL();
        mainWindow.webContents.send("screenshot:capture", imgArr);
      });
  });

  ipcMain.on("videoShot", (e, value) => {
    desktopCapturer
      .getSources({ types: ["window", "screen"] })
      .then(async (sources) => {
        console.log(sources, "sources");
        for (const source of sources) {
          // if (source.name.includes('my-react-two')) {
          // console.log(source.name,888)
          mainWindow.webContents.send("videoShot", source.id);
          return;
          //}
        }
      });
  });

  // 监听停止录制
  ipcMain.on("stopVideo", (event, message) => {
    mainWindow.webContents.send("stopVideo", message);
  });

  ipcMain.on("gethtml", (event, message) => {
    let url =
      message ||
      "https://www.soujianzhu.cn/NormAndRules/gfnr.aspx?id=2295&conid=61127";
    let html = "";
    https.get(url, function (res) {
      res.on("data", function (chunk) {
        html += chunk;
      });
      res.on("end", function () {
        // console.log(html,'html')
        var $ = cheerio.load(html);
        var contentAll = $("#lemmaContent");
        let categrory = $("#mldl");
        let arr = categrory.children();
        arr.each((index, item) => {
          menuList.push(item.children[0].attribs);
        });
        if (menuList.length > 0) {
          getAllhtml(event);
        }
      });
    });
  });

  ipcMain.on("exportToWord", (event, message) => {
    mainWindow.webContents.send("exportToWord", message);
  });

  function insertDiv(html,event) {
    var $ = cheerio.load(html);
    $("#lemmaContent span").each(function (index, element) {
      // 检查是否有data-value属性
      let style = $(this).attr("style");
      const value = $(this).text();
      if (value.indexOf("▼ 展开条文说明") == 0) {
        $(this).remove();
      }
      if (style.includes("display:none")) {
        $(this).attr("style", `${style};display:block`);
      }
    });
    event.sender.send("createDiv", $("#lemmaContent").html());
    
  }

  const getAllhtml = (event) => {
    const interval = setInterval(() => {
      // 获取当前元素
      const currentItem = menuList[currentIndex];
      let requestUrl = `${host}${currentItem.href}`;
      // 发送请求（这里使用 fetch 作为示例）
      let currentHtml = "";
      https.get(requestUrl, function (res) {
        res.on("data", function (chunk) {
          currentHtml += chunk;
        });
        res.on("end", function () {
          insertDiv(currentHtml,event);
        });
      });

      // 移动到下一个元素
      currentIndex++;

      // 如果已经遍历完数组，清除定时器
      if (currentIndex === menuList.length) {
        clearInterval(interval);
        event.sender.send("replyFromMain", true);
      }
    }, 1000);
  };
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
